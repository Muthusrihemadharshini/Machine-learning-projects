

---

# Iris Flower Classification System  

## Introduction  
The **Iris Flower Classification System** is a machine learning project that classifies iris flowers into three species—**Setosa**, **Versicolor**, and **Virginica**—based on their physical attributes such as sepal length, sepal width, petal length, and petal width. This project is built to demonstrate data preprocessing, model training, evaluation, and prediction using Python and scikit-learn.  

---

## Features  
- **Data Visualization**: Plots the distribution of features for better understanding.  
- **Model Training**: Utilizes machine learning algorithms to classify iris species.  
- **Performance Metrics**: Provides accuracy, precision, and recall to evaluate the model.  
- **Interactive Prediction**: Input feature values to predict the flower species.  

---

## Dataset  
The system uses the [Iris Dataset](https://archive.ics.uci.edu/ml/datasets/iris), a popular dataset in machine learning.  
- 150 samples  
- 4 features: Sepal Length, Sepal Width, Petal Length, and Petal Width  
- 3 Classes: Setosa, Versicolor, Virginica  

---

## Installation  

### Prerequisites  
Ensure Python 3.7 or later is installed, along with the following libraries:  
- `numpy`  
- `pandas`  
- `matplotlib`  
- `seaborn`  
- `scikit-learn`  

### Steps  
1. Clone this repository:  
   ```bash  
   git clone https://github.com/your_username/iris-flower-classification.git  
   cd iris-flower-classification  
   ```  
2. Install the required libraries:  
   ```bash  
   pip install -r requirements.txt  
   ```  

---

## Usage  

### Run the Project  
1. Execute the main script to start the system:  
   ```bash  
   python iris_classification.py  
   ```  
2. Input feature values to predict the species.  

### Example  
```  
Sepal Length: 5.1  
Sepal Width: 3.5  
Petal Length: 1.4  
Petal Width: 0.2  
Predicted Species: Setosa  
```  

---

## Code Overview  
1. **data_preprocessing.py**  
   - Loads and cleans the dataset.  
   - Splits data into training and testing sets.  

2. **model_training.py**  
   - Implements classification models such as Logistic Regression, Decision Trees, and Support Vector Machines.  
   - Saves the trained model for predictions.  

3. **visualization.py**  
   - Visualizes feature relationships using scatter plots, heatmaps, and histograms.  

4. **iris_classification.py**  
   - Main file for running the project and making predictions.  

---

## Results  
- **Accuracy**: ~95% on the test set.  
- **Confusion Matrix**: Demonstrates strong performance across all classes.  

---

## Contributing  
Contributions are welcome! Please fork this repository and submit a pull request with your updates.  

---

## License  
This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.  

---  


